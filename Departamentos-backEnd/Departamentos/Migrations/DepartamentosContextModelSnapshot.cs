// <auto-generated />
using System;
using Departamentos.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Departamentos.Migrations
{
    [DbContext(typeof(DepartamentosContext))]
    partial class DepartamentosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Asignatura", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("IdCatedra")
                        .HasColumnType("smallint");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCatedra");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Asunto", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("asunto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Asuntos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("IdAsignatura")
                        .HasColumnType("smallint");

                    b.Property<short>("IdEstadoCargo")
                        .HasColumnType("smallint");

                    b.Property<short>("IdTipoCargo")
                        .HasColumnType("smallint");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAsignatura");

                    b.HasIndex("IdEstadoCargo");

                    b.HasIndex("IdTipoCargo");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Catedra", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Catedras");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Docente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Cuil")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EsDirectivo")
                        .HasColumnType("boolean");

                    b.Property<long>("Legajo")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Docentes");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.DocenteTomaCargo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdCargo")
                        .HasColumnType("integer");

                    b.Property<int>("IdDocente")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Ingreso")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Vencimiento")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdCargo");

                    b.HasIndex("IdDocente");

                    b.ToTable("DocenteTomaCargos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.DocumentoMovimiento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdDocente")
                        .HasColumnType("integer");

                    b.Property<long>("IdDocumento")
                        .HasColumnType("bigint");

                    b.Property<short>("IdEntidadDestino")
                        .HasColumnType("smallint");

                    b.Property<short>("IdEntidadOrigen")
                        .HasColumnType("smallint");

                    b.Property<long>("IdPase")
                        .HasColumnType("bigint");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdDocente");

                    b.HasIndex("IdDocumento");

                    b.HasIndex("IdEntidadDestino");

                    b.HasIndex("IdEntidadOrigen");

                    b.HasIndex("IdPase");

                    b.ToTable("DocumentoMovimientos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Entidad", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.EstadoCargo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EstadoCargos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.EstadoTramite", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EstadoTramites");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.EtapaTramite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("IdAsunto")
                        .HasColumnType("smallint");

                    b.Property<short>("IdTipoTramite")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IdAsunto");

                    b.HasIndex("IdTipoTramite");

                    b.ToTable("EtapaTramites");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Nota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Año")
                        .HasColumnType("integer");

                    b.Property<string>("DocNumeroOriginal")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdCargo")
                        .HasColumnType("integer");

                    b.Property<short>("IdEntidadDestino")
                        .HasColumnType("smallint");

                    b.Property<short>("IdEntidadOrigen")
                        .HasColumnType("smallint");

                    b.Property<short>("IdEstadoTramite")
                        .HasColumnType("smallint");

                    b.Property<long>("IdEtapaTramite")
                        .HasColumnType("bigint");

                    b.Property<short>("IdTipoDocumento")
                        .HasColumnType("smallint");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdCargo");

                    b.HasIndex("IdEntidadDestino");

                    b.HasIndex("IdEntidadOrigen");

                    b.HasIndex("IdEstadoTramite");

                    b.HasIndex("IdEtapaTramite");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Pase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdDocente")
                        .HasColumnType("integer");

                    b.Property<long>("IdDocumento")
                        .HasColumnType("bigint");

                    b.Property<short>("IdEstadoTramite")
                        .HasColumnType("smallint");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdDocente");

                    b.HasIndex("IdDocumento");

                    b.HasIndex("IdEstadoTramite");

                    b.ToTable("Pases");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.ReferenciaDocente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdDocenteReferenciado")
                        .HasColumnType("integer");

                    b.Property<long>("IdDocumento")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdDocenteReferenciado");

                    b.HasIndex("IdDocumento");

                    b.ToTable("ReferenciaDocentes");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.ReferenciaDocumento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdDocumento")
                        .HasColumnType("bigint");

                    b.Property<long>("IdDocumentoReferenciado")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdDocumento");

                    b.HasIndex("IdDocumentoReferenciado");

                    b.ToTable("ReferenciaDocumentos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.ReferenciaEntidad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdDocumento")
                        .HasColumnType("bigint");

                    b.Property<short>("IdEntidadReferenciada")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IdDocumento");

                    b.HasIndex("IdEntidadReferenciada");

                    b.ToTable("ReferenciaEntidades");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.TipoCargo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Tipo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoCargos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.TipoDocumento", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Tipo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoDocumentos");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.TipoTramite", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Tipo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoTramites");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Asignatura", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Catedra", "Catedra")
                        .WithMany()
                        .HasForeignKey("IdCatedra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catedra");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Cargo", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("IdAsignatura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.EstadoCargo", "EstadoCargo")
                        .WithMany()
                        .HasForeignKey("IdEstadoCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.TipoCargo", "TipoCargo")
                        .WithMany()
                        .HasForeignKey("IdTipoCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("EstadoCargo");

                    b.Navigation("TipoCargo");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.DocenteTomaCargo", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("IdDocente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Docente");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.DocumentoMovimiento", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("IdDocente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Nota", "Documento")
                        .WithMany()
                        .HasForeignKey("IdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Entidad", "EntidadDestino")
                        .WithMany()
                        .HasForeignKey("IdEntidadDestino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Entidad", "EntidadOrigen")
                        .WithMany()
                        .HasForeignKey("IdEntidadOrigen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Pase", "Pase")
                        .WithMany()
                        .HasForeignKey("IdPase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docente");

                    b.Navigation("Documento");

                    b.Navigation("EntidadDestino");

                    b.Navigation("EntidadOrigen");

                    b.Navigation("Pase");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.EtapaTramite", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Asunto", "Asunto")
                        .WithMany()
                        .HasForeignKey("IdAsunto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.TipoTramite", "TipoTramite")
                        .WithMany()
                        .HasForeignKey("IdTipoTramite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asunto");

                    b.Navigation("TipoTramite");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Nota", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Entidad", "EntidadDestino")
                        .WithMany()
                        .HasForeignKey("IdEntidadDestino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Entidad", "EntidadOrigen")
                        .WithMany()
                        .HasForeignKey("IdEntidadOrigen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.EstadoTramite", "EstadoTramite")
                        .WithMany()
                        .HasForeignKey("IdEstadoTramite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.EtapaTramite", "EtapaTramite")
                        .WithMany()
                        .HasForeignKey("IdEtapaTramite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("EntidadDestino");

                    b.Navigation("EntidadOrigen");

                    b.Navigation("EstadoTramite");

                    b.Navigation("EtapaTramite");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.Pase", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("IdDocente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Nota", "Documento")
                        .WithMany()
                        .HasForeignKey("IdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.EstadoTramite", "EstadoTramite")
                        .WithMany()
                        .HasForeignKey("IdEstadoTramite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docente");

                    b.Navigation("Documento");

                    b.Navigation("EstadoTramite");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.ReferenciaDocente", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Docente", "DocenteReferenciado")
                        .WithMany()
                        .HasForeignKey("IdDocenteReferenciado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Nota", "Documento")
                        .WithMany()
                        .HasForeignKey("IdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocenteReferenciado");

                    b.Navigation("Documento");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.ReferenciaDocumento", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Nota", "Documento")
                        .WithMany()
                        .HasForeignKey("IdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Nota", "DocumentoReferenciado")
                        .WithMany()
                        .HasForeignKey("IdDocumentoReferenciado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("DocumentoReferenciado");
                });

            modelBuilder.Entity("Departamentos.Infrastructure.Persistents.Entities.ReferenciaEntidad", b =>
                {
                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Nota", "Documento")
                        .WithMany()
                        .HasForeignKey("IdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Departamentos.Infrastructure.Persistents.Entities.Entidad", "EntidadReferenciada")
                        .WithMany()
                        .HasForeignKey("IdEntidadReferenciada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("EntidadReferenciada");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
